; Uniforms
.fvec projMtx[4]
.fvec mdlvMtx[4]

; Constants
.constf consts(1.0, 0.0, 0.0, 0.0)

.alias ones  consts.xxxx
.alias zeros consts.yyyy

; Inputs
.in inPosition     v0
.in inColor        v1
.in inTexCoord     v2

; Outputs
.out outPosition  position
.out outColor     color
.out outTexCoord0 texcoord0

; void main()
.proc main
    ; r0 = vec4(inPosition, 1.0)
    mov r0.xyz, inPosition
    mov r0.w,   ones

    ; pos = mdlvMtx * inPosition;
    dp4 r1.x, mdlvMtx[0], r0
    dp4 r1.y, mdlvMtx[1], r0
    dp4 r1.z, mdlvMtx[2], r0
    dp4 r1.w, mdlvMtx[3], r0

    ; outPosition = projMtx * pos
    dp4 outPosition.x, projMtx[0], r1
    dp4 outPosition.y, projMtx[1], r1
    dp4 outPosition.z, projMtx[2], r1
    dp4 outPosition.w, projMtx[3], r1

    ; outTexCoord = inTexCoord
    ; flip the y coordinate for top-left origin
    mov outTexCoord0.xzw, inTexCoord.xzw
    add outTexCoord0.y, consts.x, -inTexCoord.y

    ; outColor = inColor
    mov outColor,    inColor

    ; We're finished
    end
.end
